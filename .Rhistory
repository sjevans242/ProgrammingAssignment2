install.packages("KernSmooth")
copyright()
getwd
install.packages(swirl)
install.packages("swirl")
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,Z,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_matrix)
colnames(my_data) <- cnames
my_data
install.packages("swirl")
library(swirl)
swirl
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10 <= 10
5 != 7
(5 = 7) != TRUE
(5 == 7) != TRUE
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, FALSE)
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean() <- c(2, 4, 5)
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num =5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){c[1]}, c(8, 4, 0))
evaluate(function(x){c(x[1])}, c(8, 4, 0))
evaluate(function(x){c(x[3])}, c(8, 4, 0))
evaluate(function(x){c(x[(length(x))])}, c(8, 4, 0))
?paste
paste("Programming, "is", "fun!"")
paste("Programming, "is", "fun!")
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit
submit()
submit()
submit()
telegram(that was a bitch)
telegram("that was a bitch")
submit()
submit()
submit()
submit()
submit()
mad_libs(England, beautiful, country)
mad_libs("England", "beautiful", "country")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time()), t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
quit
quit()
getwd()
setwd("~/Google Drive/coursera/DataScience/R_programming/")
ls()
dir()
setwd("./ProgrammingAssignment2")
dir()
source("cachematrix.R")
source("cachematrix.R")
test_matrix <- makeCacheMatrix(matrix(1:16, 4, 4))
test_matrix
test_matrix <- matrix(1:16, 4, 4)
ls()
test_matrix
test_matrix$get()
test_matrix <- makeCacheMatrix(matrix(1:16, 4, 4))
test_matrix$get()
test_matrix$getInverse()
test_matrix$GetInv()
cacheSolve(test_matrix)
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$GetInv()
cacheSolve(my_matrix)
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$GetInv()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$GetInv()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$GetInv()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$GetInv()
ls()
rm("cacheSolve", "makeCacheMatrix", "my_matrix", "test_matrix")
ls()
source("cachematrix.R")
test_matrix <- makeCacheMatix(matrix(rnorm(16),2,2))
test_matrix <- makeCacheMatrix(matrix(rnorm(16),2,2))
test_matrix$get()
test_matrix <- makeCacheMatrix(matrix(rnorm(16),4,4))
test_matrix$get()
test_matrix$GetInv()
cacheSolve(test_matrix)
cacheSolve(test_matrix)
test_matrix$GetInv()
quit()
